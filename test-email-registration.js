#!/usr/bin/env node

/**
 * Script para probar el flujo completo de registro con confirmaci√≥n de email
 */

import { createClient } from '@supabase/supabase-js';

// Configuraci√≥n de Supabase (desarrollo local)
const SUPABASE_URL = 'http://127.0.0.1:54321';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFjZWxicnpqcm1qeHBqeGxseWhrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczNDQ1NDUsImV4cCI6MjA2MjkyMDU0NX0.FPREjK1R3FEsVbcAMQVcOrRcs16MYFL8cQHK2W3STKw';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function testEmailRegistration() {
  console.log('üß™ PROBANDO REGISTRO CON CONFIRMACI√ìN DE EMAIL');
  console.log('='.repeat(50));
  
  // Generar email √∫nico para prueba
  const timestamp = Date.now();
  const testEmail = `test-${timestamp}@example.com`;
  const testPassword = 'TestPassword123!';
  
  console.log(`üìß Email de prueba: ${testEmail}`);
  console.log(`üîí Contrase√±a: ${testPassword}`);
  
  try {
    console.log('\n1Ô∏è‚É£ Intentando registrar usuario...');
    
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          full_name: 'Usuario de Prueba',
          role: 'doctor'
        }
      }
    });
    
    if (signUpError) {
      console.error('‚ùå Error en registro:', signUpError.message);
      return;
    }
    
    console.log('‚úÖ Usuario creado exitosamente');
    console.log('üìß ID del usuario:', signUpData.user?.id);
    console.log('üìß Email confirmado:', signUpData.user?.email_confirmed_at ? 'S√≠' : 'No');
    
    if (!signUpData.user?.email_confirmed_at) {
      console.log('\nüì¨ EMAIL DE CONFIRMACI√ìN ENVIADO');
      console.log('='.repeat(30));
      console.log('‚úÖ Se ha enviado un email de confirmaci√≥n');
      console.log('üîç Para verlo en desarrollo local:');
      console.log('   1. Ve a: http://localhost:54324');
      console.log('   2. Busca el email para:', testEmail);
      console.log('   3. Haz clic en el enlace de confirmaci√≥n');
      console.log('   4. Luego intenta hacer login');
    }
    
    console.log('\n2Ô∏è‚É£ Intentando hacer login ANTES de confirmar...');
    
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });
    
    if (signInError) {
      if (signInError.message.includes('Email not confirmed')) {
        console.log('‚úÖ CORRECTO: Se requiere confirmaci√≥n de email');
        console.log('üìß Mensaje:', signInError.message);
      } else {
        console.log('‚ùå Error inesperado:', signInError.message);
      }
    } else {
      console.log('‚ö†Ô∏è ADVERTENCIA: Login exitoso sin confirmaci√≥n');
      console.log('üîß Verifica que enable_confirmations = true en config.toml');
    }
    
    console.log('\n3Ô∏è‚É£ Verificando estado en base de datos...');
    
    // Verificar si se cre√≥ el perfil
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', testEmail)
      .single();
    
    if (profileError) {
      console.log('‚ö†Ô∏è No se encontr√≥ perfil:', profileError.message);
    } else {
      console.log('‚úÖ Perfil creado:', profile.full_name);
      console.log('üìß Email en perfil:', profile.email);
      console.log('‚úÖ Perfil activo:', profile.is_active);
    }
    
  } catch (error) {
    console.error('‚ùå Error general:', error);
  }
  
  console.log('\nüìã RESUMEN DE LA PRUEBA');
  console.log('='.repeat(30));
  console.log('‚úÖ Usuario registrado correctamente');
  console.log('üìß Email de confirmaci√≥n enviado al servidor de testing');
  console.log('üîí Login bloqueado hasta confirmar email');
  console.log('üì¨ Revisa http://localhost:54324 para ver el email');
  
  console.log('\nüí° PR√ìXIMOS PASOS:');
  console.log('1. Ve a http://localhost:54324');
  console.log('2. Encuentra el email de confirmaci√≥n');
  console.log('3. Haz clic en el enlace');
  console.log('4. Intenta hacer login de nuevo');
  
  console.log('\nüßπ LIMPIEZA:');
  console.log(`Para eliminar este usuario de prueba, ejecuta en el SQL Editor:`);
  console.log(`DELETE FROM auth.users WHERE email = '${testEmail}';`);
  console.log(`DELETE FROM profiles WHERE email = '${testEmail}';`);
}

// Ejecutar la prueba
testEmailRegistration().catch(console.error);
