#!/usr/bin/env node

/**
 * Script de emergencia para limpiar pol√≠ticas RLS duplicadas
 * √ötil cuando las migraciones fallan por conflictos de pol√≠ticas
 */

import { execSync } from 'child_process';

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const prefix = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è';
  console.log(`${prefix} [${timestamp}] ${message}`);
}

function emergencyCleanup() {
  log('üö® INICIANDO LIMPIEZA DE EMERGENCIA DE POL√çTICAS RLS');
  log('=====================================================\n');
  
  try {
    // Paso 1: Aplicar solo la migraci√≥n de emergencia
    log('Paso 1: Aplicando limpieza de emergencia...');
    execSync('npx supabase db push --include-all', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    log('Limpieza de emergencia aplicada exitosamente', 'success');
    
    // Paso 2: Verificar que no hay pol√≠ticas INSERT
    log('\nPaso 2: Verificando estado de pol√≠ticas...');
    execSync('node verify-migrations.js', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    log('\nüéâ ¬°Limpieza de emergencia completada!', 'success');
    log('\nüìã Estado actual:');
    log('   ‚úÖ Pol√≠ticas INSERT duplicadas eliminadas');
    log('   ‚úÖ Base de datos lista para nuevas pol√≠ticas');
    log('   ‚úÖ Puedes continuar con las migraciones normales');
    
    log('\nüîÑ Pr√≥ximos pasos:');
    log('   1. Ejecutar: node apply-curp-migrations.js');
    log('   2. O aplicar manualmente: npx supabase db push');
    
  } catch (error) {
    log(`Error durante la limpieza de emergencia: ${error.message}`, 'error');
    log('\nüîß Soluci√≥n de problemas manual:');
    log('   1. Conectar a Supabase Dashboard > SQL Editor');
    log('   2. Ejecutar manualmente:');
    log('      DROP POLICY IF EXISTS "patients_insert_only_active_approved_clinics" ON public.patients;');
    log('      DROP POLICY IF EXISTS "patients_insert_by_clinic" ON public.patients;');
    log('      DROP POLICY IF EXISTS "patients_insert_clinic" ON public.patients;');
    log('   3. Verificar con: SELECT * FROM pg_policies WHERE tablename = \'patients\';');
    process.exit(1);
  }
}

function main() {
  log('‚ö†Ô∏è  ADVERTENCIA: Este script eliminar√° TODAS las pol√≠ticas INSERT de la tabla patients');
  log('   Solo ejecuta esto si tienes problemas con pol√≠ticas duplicadas');
  log('   ¬øDeseas continuar? (y/N)');
  
  // En modo autom√°tico, continuar
  if (process.env.AUTO_CONFIRM === 'true') {
    log('Modo autom√°tico detectado, continuando...');
    emergencyCleanup();
  } else {
    // En modo interactivo, esperar confirmaci√≥n
    process.stdin.once('data', (data) => {
      const input = data.toString().trim().toLowerCase();
      if (input === 'y' || input === 'yes') {
        emergencyCleanup();
      } else {
        log('Operaci√≥n cancelada por el usuario.', 'warning');
        process.exit(0);
      }
    });
  }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}

export { main as emergencyPolicyCleanup };
